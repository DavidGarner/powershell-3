[cmdletBinding()]
Param(
    # What name would you prefer the drive to be mapped under.
    [string]$Store = "ps"

    , # Store Root Path
    [string]$StoreRoot = (Join-Path $env:HOMEDRIVE 'ps')

    # Verbose output with ". $profile.currentUserAllHosts -Verbose" in a session to view extra information
)

$Verbose = $VerbosePreference
$git = $false

if(Get-Command "git" -ErrorAction SilentlyContinue){
    $git = $true
}

# ---------- Create the store drive ----------
$v = measure-command {
    try
    {
        Get-PSDrive $Store -ErrorAction stop
    }
    catch [System.Exception]
    {
        Write-Verbose "adding the store: $Store"

        $Drive = @{
            Root = $StoreRoot
            Description = "Powershell script and module store"
            Name = $Store
            PSProvider = "FileSystem"
        }

        New-PSDrive @Drive
    }
    catch
    {
        Write-Verbose 'No Fault'
    }
}

Write-Verbose "$('{0:N6}' -f $v.TotalSeconds) seconds - Detecting store drive"

# ---------- Add store to module path ----------
$v = measure-command {
    Write-Verbose "path Before:"
    $env:PSModulePath.split(';') | % {Write-Verbose "    $PSItem"}
    # Check to see if the above added drive is in the module path. If not, add it.
    if($env:PSModulePath.Contains("$Store`:"))
    {
        Write-Verbose "Store exists"
    } else {
        Write-Verbose "Store not found"
        $env:PSModulePath = $env:PSModulePath.Insert(0, "$Store`:\;")
        Write-Verbose "path after:"
        $env:PSModulePath.split(';') | % {Write-Verbose "    $PSItem"}
    }
}

Write-Verbose "$($v.TotalSeconds) seconds - add store to path"

function swap-python {
    if($env:path -match 'Python27'){
        $env:Path = $env:path.replace('Python27', 'Python34')
    } else {
        $env:Path = $env:path.replace('Python34', 'Python27')
    }
}

function get-list{
	get-childitem @args | format-wide -autosize
}

function new-directory{
	new-item -type directory -name $args[0]
	Set-Location $args[0]
}

function git-bash{
    [string]$string = "$env:ProgramFiles\git\bin\sh.exe --login"
    Invoke-Expression $string
}

function touch{
    Param(
        [Parameter(Mandatory=$true)]
        [string]$name
    )
    if(-not (test-path $name)){
        new-item -type file $name -force
    } else {
        Write-Warning "$name exists"
    }
}

# Set up a simple prompt, adding the git prompt parts inside git repos
function global:prompt {
    $realLASTEXITCODE = $LASTEXITCODE

    if($git){
        # Reset color, which can be messed up by Enable-GitColors
        $Host.UI.RawUI.ForegroundColor = $GitPromptSettings.DefaultForegroundColor
    }

    Write-Host($pwd.Path) -nonewline -ForegroundColor Green

    if($git){
        Write-VcsStatus
    }

    $global:LASTEXITCODE = $realLASTEXITCODE
    [System.Environment]::NewLine + "$env:USERNAME $ "
}

function Backup-Profile {
    $profile = @{
        Path = $profile.CurrentUserAllHosts
        Destination = "$Store`:\profile.Jack.template"
        Force = $true
    }

    Copy-Item @profile
}

Set-Alias subl (Join-Path $HOME "Sublime Text 3\sublime_text.exe")
Set-Alias sh git-bash
Set-Alias lsa get-list
Set-Alias new new-directory
Set-Alias g git

$HOMEPATH = Get-PSDrive -Name $HOME.Trim(':\') | select DisplayRoot

if($git){
    Enable-GitColors
}

Set-Location "$HOME\src"
lsa -Directory
